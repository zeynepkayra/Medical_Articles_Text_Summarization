# -*- coding: utf-8 -*-
"""eddie-bart model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pIHzv0mP-wmyhpIMlozA4YB7W42ymf5W

#import relevant packages
"""

!pip install transformers datasets rouge_score bert-score
!pip install nltk
import pandas as pd
from datasets import load_dataset
from datasets import load_metric
import torch
from transformers import AutoModel, AutoTokenizer, AutoModelForSeq2SeqLM
from typing import Dict, Any

"""#load dataset"""

dataset = load_dataset('ccdv/pubmed-summarization')

"""#choose 125 data from test"""

data=dataset['test'].shuffle(seed=42).select(range(125))

"""#remove newline"""

def remove_newlines(example):
    example['article'] = example['article'].replace('\n', '')
    return example
data = data.map(remove_newlines)

"""#use pretrained distil-bart model"""

model_name = "sshleifer/distilbart-cnn-12-6"
model = AutoModelForSeq2SeqLM.from_pretrained("sshleifer/distilbart-cnn-12-6")
tokenizer = AutoTokenizer.from_pretrained(model_name)

"""#generate prediction"""

def generate_summary(batch):
    inputs = tokenizer(batch["article"], return_tensors="pt", max_length=1024, truncation=True, padding="max_length")
    outputs = model.generate(inputs["input_ids"], max_length=150, num_beams=4, early_stopping=True)
    batch["pred"] = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return batch

result = data.map(generate_summary)

"""#compute and simplify rouge score"""

rouge = load_metric("rouge")

rouge_scores = rouge.compute(predictions=result["pred"], references=data["abstract"])

def simplify_rouge_scores(rouge_scores: Dict[str, Any]) -> str:
    simplified_text = ""
    for key, value in rouge_scores.items():
        # Extract low, mid, and high scores for each ROUGE metric
        low, mid, high = value.low, value.mid, value.high
        simplified_text += f"{key}: Precision ranges from {low.precision:.2%} to {high.precision:.2%}, "
        simplified_text += f"Recall ranges from {low.recall:.2%} to {high.recall:.2%}, "
        simplified_text += f"F1 Score ranges from {low.fmeasure:.2%} to {high.fmeasure:.2%}.\n"

    return simplified_text

print(simplify_rouge_scores(rouge_scores))

"""#output data file"""

df = pd.DataFrame(result)
df.rename(columns={'pred': 'prediction'}, inplace=True)

def add_newlines(row):
    row['article'] = row['article'].replace('. ', '.\n')
    row['prediction'] = row['prediction'].replace('. ', '.\n')
    return row
df = df.apply(add_newlines, axis=1)

df.to_excel('bart_summary.xlsx', index=False)